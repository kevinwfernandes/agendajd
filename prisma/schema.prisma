// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Definição de enums
enum TipoUsuario {
  MACOM_ADMIN_GERAL
  ADMIN_DM
  ADMIN_FDJ
  ADMIN_FRATERNA
  MACOM
  MEMBRO_DM
  MEMBRO_FDJ
  MEMBRO_FRATERNA
}

// Modelos de dados
model Classe {
  id          Int      @id @default(autoincrement())
  nome        String   @unique
  descricao   String?

  // Relações
  usuarios    User[]
  eventos     Evento[]
  recados     Recado[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Modelos para o NextAuth
model Account {
  id                 String    @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?   @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Modelo User que serve tanto para NextAuth quanto para nosso aplicativo
model User {
  id             String         @id @default(cuid())
  name           String         // Nome do usuário
  email          String         @unique
  emailVerified  DateTime?      // NextAuth: verificação de email
  image          String?        // NextAuth: url da imagem
  
  // Campos específicos do nosso aplicativo
  tipoUsuario    TipoUsuario?
  dataNascimento DateTime?
  telefone       String?
  passwordHash   String?        // Hash da senha (p/ credentials provider)
  
  // Relações NextAuth
  accounts       Account[]
  sessions       Session[]
  
  // Relações do nosso aplicativo
  classe         Classe?        @relation(fields: [classeId], references: [id])
  classeId       Int?
  
  eventosAutor   Evento[]       @relation("EventoAutor")
  recados        Recado[]
  comentarios    ComentarioRecado[]
  notificacoes   Notificacao[]
  aniversarios   Aniversario[]
  usuarioEventos UsuarioEvento[]
  pushSubscriptions PushSubscription[]
  
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  
  @@index([classeId])
  @@index([tipoUsuario])
  @@map("users")
}

model Evento {
  id             Int             @id @default(autoincrement())
  titulo         String
  descricao      String
  data           DateTime
  publico        Boolean         @default(false)
  sincGCalendar  Boolean         @default(false)
  
  // Relações
  classe         Classe?         @relation(fields: [classeId], references: [id])
  classeId       Int?
  
  autor          User            @relation("EventoAutor", fields: [autorId], references: [id])
  autorId        String
  
  notificacoes   Notificacao[]
  usuarioEventos UsuarioEvento[]
  
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  
  @@index([data])
  @@index([classeId])
  @@index([publico])
}

model Recado {
  id           Int           @id @default(autoincrement())
  texto        String
  data         DateTime      @default(now())
  global       Boolean       @default(false)
  
  // Relações
  classe       Classe?       @relation(fields: [classeId], references: [id])
  classeId     Int?
  
  autor        User          @relation(fields: [autorId], references: [id])
  autorId      String
  
  notificacoes Notificacao[]
  comentarios  ComentarioRecado[]
  
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  @@index([data])
  @@index([classeId])
  @@index([global])
}

model Notificacao {
  id        Int       @id @default(autoincrement())
  titulo    String
  mensagem  String
  data      DateTime  @default(now())
  lida      Boolean   @default(false)
  
  // Relações
  usuario   User      @relation(fields: [usuarioId], references: [id])
  usuarioId String
  
  evento    Evento?   @relation(fields: [eventoId], references: [id])
  eventoId  Int?
  
  recado    Recado?   @relation(fields: [recadoId], references: [id])
  recadoId  Int?
  
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  @@index([usuarioId])
  @@index([lida])
  @@index([data])
}

model UsuarioEvento {
  id         Int      @id @default(autoincrement())
  confirmado Boolean  @default(false)
  
  // Relações
  usuario    User     @relation(fields: [usuarioId], references: [id])
  usuarioId  String
  
  evento     Evento   @relation(fields: [eventoId], references: [id])
  eventoId   Int
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@unique([usuarioId, eventoId])
}

model Aniversario {
  id        Int       @id @default(autoincrement())
  data      DateTime
  mensagem  String?
  
  // Relações
  usuario   User      @relation(fields: [usuarioId], references: [id])
  usuarioId String
  
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  @@index([data])
}

// Modelo para gerenciar inscrições de Push Notification
model PushSubscription {
  id         Int       @id @default(autoincrement())
  endpoint   String    @unique
  p256dh     String
  auth       String
  expirationTime DateTime?
  
  // Relações
  usuario    User     @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  usuarioId  String
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@index([usuarioId])
}

// Modelo para comentários em recados
model ComentarioRecado {
  id           Int      @id @default(autoincrement())
  texto        String
  data         DateTime @default(now())
  
  // Relações
  recado       Recado   @relation(fields: [recadoId], references: [id], onDelete: Cascade)
  recadoId     Int
  
  autor        User     @relation(fields: [autorId], references: [id])
  autorId      String
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@index([recadoId])
  @@index([autorId])
  @@index([data])
} 